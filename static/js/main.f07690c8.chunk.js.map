{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","defaultProps","aboutText","letters","redoWords","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","placeholder","value","onChange","event","target","rows","backgroundColor","toUpperCase","toLowerCase","navigator","clipboard","writeText","length","split","slice","join","push","pop","App","setMode","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f07690c8.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse \" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='dark' ? \"light\" : \"dark\"}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Light mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title : PropTypes.string,\r\n    aboutText : PropTypes.string\r\n}\r\n// if props aren't set\r\nNavbar.defaultProps = {\r\n    title : 'Set title here',\r\n    aboutText : 'About text here'\r\n} ","import React,{useState} from 'react'\r\n\r\nlet letters = [];\r\nlet redoWords = [];\r\nexport default function TextForm(props) {\r\n\r\n\r\n    const handleUpclick = ()=> {\r\n        setText(text.toUpperCase());\r\n    }\r\n    \r\n    const handleLoclick = ()=> {\r\n        setText(text.toLowerCase());\r\n    }\r\n    const handleOnChange = (event)=> {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClearClick = ()=> {\r\n        setText(\"\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n    // last typed word is removed every time\r\n    const handleUndo = ()=>{\r\n        if(text.length !== 0){\r\n        letters = text.split(\" \");\r\n        setText(letters.slice(0,letters.length-1).join(\" \"));\r\n        redoWords.push(letters[letters.length-1]);\r\n        }\r\n    }\r\n    // redo last removed word\r\n    const handleRedo = ()=>{\r\n        if(redoWords.length !== 0){\r\n        setText(text+\" \" + redoWords[redoWords.length-1]);\r\n        redoWords.pop();\r\n        }\r\n    }\r\n\r\n    const [text,setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n        <div className='container' style={{color :props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea \r\n                    className=\"form-control\" \r\n                    placeholder = \"Enter text here\" \r\n                    value = {text}\r\n                    onChange={handleOnChange}\r\n                    id=\"myBox\"\r\n                    rows=\"7\" \r\n                    style={{\r\n                        backgroundColor :props.mode === \"dark\" ? \"#212529\":\"white\",\r\n                        color:props.mode === 'dark'?'white':'black' }}>    \r\n                </textarea>\r\n            </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpclick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoclick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUndo}>Undo text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleRedo}>Redo text</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color :props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n\r\n            <h2>Your Text Summary</h2>\r\n            \r\n            {text.length !== 0 &&\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                  }\r\n            {text.length === 0 &&\r\n                           <p>0 words and {text.length} characters</p>\r\n                           }\r\n            {/* on average 125 words/min ==> 1/125 = 0.008 */}\r\n            <p>{(text.split(\" \").length-1)*0.008} minutes of reading</p>\r\n\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text : \"Enter text in the above box to preview it\"}</p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\n// import {\n//     BrowserRouter as Router,\n//     Routes,\n//     Route,\n//     Link\n// } from \"react-router-dom\";\n\nfunction App() {\n    const [mode, setMode] = useState(\"dark\");\n\n    const toggleMode = () => {\n        if (mode === \"light\") {\n            setMode(\"dark\");\n            document.body.style.backgroundColor = \"currentcolor\";\n\n        }\n        else {\n            setMode(\"light\");\n            document.body.style.backgroundColor = \"white\";\n        }\n    }\n\n    return (\n        <>\n            {/* <Router> */}\n                <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n                <div className=\"container my-3\">\n                    {/* <Routes> */}\n                        {/* <Route path=\"/\" element={<TextForm heading=\"Enter text below to analyze\" mode={mode} />} >\n                        </Route>\n                        <Route path=\"/about\" element={<About mode={mode} />}>\n                        </Route> */}\n                    {/* </Routes> */}\n                    <TextForm heading=\"Enter text below to analyze\" mode={mode}/>\n                </div>\n            {/* </Router> */}\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}